(ns hello-phel\sqlite-example
  (:use \SQLite3))

#(php/var_dump argv)
#(php/dump argv)

# How to use SQLite3 in Phel
# Idea from: http://zetcode.com/php/sqlite3/

(def db (php/new SQLite3 "./data/test.db"))

(defstruct Car [id name price])

(php/-> db (exec "DROP TABLE cars"))
(php/-> db (exec "CREATE TABLE cars(id INTEGER PRIMARY KEY, name TEXT, price INT)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Audi', 52642)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Mercedes', 57127)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Skoda', 9000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Volvo', 29000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Bentley', 350000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Citroen', 21000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Hummer', 41400)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Volkswagen', 21600)"))

(def cars-query (php/-> db (query "SELECT * FROM cars")))

(defn cast-array-to-struct-car [car]
  (Car (get car "id") (get car "name") (get car "price")))

(def cars
  (loop [_cars @[]
         row (php/-> cars-query (fetchArray))]
    (if row
      (recur
        (push _cars (cast-array-to-struct-car (php-array-to-table row)))
        (php/-> cars-query (fetchArray)))
      _cars)))

# Printing only the car names
(println (str (map |(get $ :name) cars)))
# Output: @["Audi" "Mercedes" "Skoda" "Volvo" "Bentley" "Citroen" "Hummer" "Volkswagen"]

# Printing the first two (struct) cars from the list as string
(println (str (map |(str $) (take 2 cars))))
# Output: @["@{:id 1 :name \"Audi\" :price 52642}" "@{:id 2 :name \"Mercedes\" :price 57127}"]