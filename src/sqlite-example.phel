(ns hello-phel\sqlite-example
  (:use \SQLite3))

#(php/var_dump argv)
#(php/dump argv)

# How to use SQLite3 in Phel
# Idea from: http://zetcode.com/php/sqlite3/

(def db (php/new SQLite3 "./data/test.db"))

(defstruct Car [id name price])

(php/-> db (exec "DROP TABLE cars"))
(php/-> db (exec "CREATE TABLE cars(id INTEGER PRIMARY KEY, name TEXT, price INT)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Audi', 52642)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Mercedes', 57127)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Skoda', 9000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Volvo', 29000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Bentley', 350000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Citroen', 21000)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Hummer', 41400)"))
(php/-> db (exec "INSERT INTO cars(name, price) VALUES('Volkswagen', 21600)"))

(defn cast-array-to-struct-car [car]
  (Car (get car "id") (get car "name") (get car "price")))

(defn find-all-cars [db]
  (let [cars-query (php/-> db (query "SELECT * FROM cars"))] 
    (loop [cars @[]
           row (php/-> cars-query (fetchArray))]
      (if row
        (recur
          (push cars (cast-array-to-struct-car (php-array-to-table row)))
          (php/-> cars-query (fetchArray)))
        cars))))

(def cars (find-all-cars db))
# Printing only the car names
(println (str (map |(get $ :name) cars))) # @["Audi" "Mercedes" "Skoda" "Volvo" "Bentley" "Citroen" "Hummer" "Volkswagen"]
# Printing the first two (struct) cars from the list as string
(println (str (map |(str $) (take 2 cars)))) # @["@{:id 1 :name \"Audi\" :price 52642}" "@{:id 2 :name \"Mercedes\" :price 57127}"]


(defn find-one-car-by-id [db id]
  (let [stmt (php/-> db (prepare "SELECT * FROM cars WHERE id = :id"))]
    (php/-> stmt (bindValue ":id" id))
    (let [res (php/-> stmt (execute))]
      (cast-array-to-struct-car (php/-> res (fetchArray))))))

# Printing one car by id
(println (str (find-one-car-by-id db 3))) # @{:id 3 :name "Skoda" :price 9000}

# Nice printing of all cars
# Remove format + printf once it's merge in the core
# https://github.com/jenshaase/phel-lang/pull/171
(defn format
  "Returns a string produced according to the formatting string fmt."
  [fmt & xs]
  (apply php/sprintf fmt xs))

(defn printf
  "Output a formatted string."
  [fmt & xs]
  (php/print (apply format fmt xs))
  nil)

(defn print-nice-cars-table [cars]
  (for [car :in cars]
    (printf "%-10s %s\n" (get car :name) (get car :price))))

(println "List with  all cars")
(print-nice-cars-table cars)
