(ns hello-phel\rock-paper-scissors)

(def rock "r")
(def paper "p")
(def scissors "s")
(def possible-guesses [rock paper scissors])

(def computer-wins 1)
(def player-wins 2)
(def tie 3)

(defn sanitize-guess-input
  "Returns the first non-empty char from the input as lowercase"
  [input]
  (get (php/trim (php/strtolower input)) 0))

(defn read-guess []
  (println "Play your hand: (r)ock, (p)aper, (s)cissors")
  (print "# ")
  (let [guess (sanitize-guess-input (php/readline))]
    (if (php/in_array guess (to-php-array possible-guesses)) guess)))

(defn calculate-winner [@{"computer-guess" computer-guess 
                          "player-guess" player-guess}]
  (let [guesses [computer-guess player-guess]]
    (cond
      (= computer-guess player-guess) tie
      (= guesses [paper rock])        computer-wins
      (= guesses [scissors paper])    computer-wins
      (= guesses [rock scissors])     computer-wins
      (= guesses [rock paper])        player-wins
      (= guesses [paper scissors])    player-wins
      (= guesses [scissors rock])     player-wins)))
  
(defn winner-result-text [winner]
  (cond 
    (= winner tie)           "Game tied!"
    (= winner computer-wins) "Computer wins!"
    (= winner player-wins)   "Player wins!"))

(defn play-hand []
  (let [computer-guess (rand-nth possible-guesses)
        player-guess   (read-guess)
        winner         (calculate-winner @{"computer-guess" computer-guess
                                           "player-guess" player-guess})]
    (println "The computer guessed:" computer-guess)
    (println "You guessed:" player-guess)
    (if (= player-guess nil)
      (println "> Your entry was invalid")
      (println ">" (winner-result-text winner)))))

(loop []
  (play-hand)
  (println)
  (recur))
