(ns hello-phel\rock-paper-scissors)

(def computer-wins 1)
(def player-wins 2)
(def tie 3)

(def possible-guesses ["r" "p" "s"])

(defn read-guess []
  (println "Play your hand: (r)ock, (p)aper, (s)cissors")
  (let [guess (php/readline)]
    (if (php/in_array guess (to-php-array possible-guesses)) guess)))

(defn winner [@{"computer-guess" computer-guess "player-guess" player-guess}]
  (let [guesses [computer-guess player-guess]]
    (cond 
      (= computer-guess player-guess) tie
      (= guesses ["p" "r"]) computer-wins
      (= guesses ["r" "p"]) player-wins
      (= guesses ["r" "s"]) computer-wins
      (= guesses ["s" "r"]) player-wins
      (= guesses ["s" "p"]) computer-wins
      (= guesses ["p" "s"]) player-wins)))
  
(defn winner-result-text [winner]
  (cond 
    (= winner tie) "Game tied!"
    (= winner computer-wins) "Computer wins!"
    (= winner player-wins) "Player wins!"))

(defn play-hand []
  (let [computer-guess (rand-nth possible-guesses)
        player-guess   (read-guess)
        winner         (winner @{"computer-guess" computer-guess "player-guess" player-guess})]
  (println "The computer guessed:" computer-guess)
  (println "You guessed:" player-guess)
    (if (= player-guess nil)
      (println "Your entry was invalid")
      (println (winner-result-text winner))
    )))

(loop []
  (play-hand)
  (recur))